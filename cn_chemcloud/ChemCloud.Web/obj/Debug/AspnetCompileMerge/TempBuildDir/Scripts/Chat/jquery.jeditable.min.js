!function ($) {
    $.fn.editable = function (t, e) {
        if ("disable" == t) return void $(this).data("disabled.editable", !0)
        if ("enable" == t) return void $(this).data("disabled.editable", !1)
        if ("destroy" == t) return void $(this).unbind($(this).data("event.editable")).removeData("disabled.editable").removeData("event.editable")
        var i = $.extend({}, $.fn.editable.defaults, { target: t }, e), o = $.editable.types[i.type].plugin || function () { }, n = $.editable.types[i.type].submit || function () { }, s = $.editable.types[i.type].buttons || $.editable.types.defaults.buttons, f = $.editable.types[i.type].content || $.editable.types.defaults.content, a = $.editable.types[i.type].element || $.editable.types.defaults.element, l = $.editable.types[i.type].reset || $.editable.types.defaults.reset, r = i.callback || function () { }, h = i.onedit || function () { }, p = i.onsubmit || function () { }, u = i.onreset || function () { }, c = i.onerror || l
        return i.tooltip && $(this).attr("title", i.tooltip), i.autowidth = "auto" == i.width, i.autoheight = "auto" == i.height, this.each(function () {
            var t = this, e = $(t).width(), d = $(t).height()
            $(this).data("event.editable", i.event), $.trim($(this).html()) || $(this).html(i.placeholder), $(this).bind(i.event, function (u) {
                if (!0 !== $(this).data("disabled.editable") && !t.editing && !1 !== h.apply(this, [i, t])) {
                    u.preventDefault(), u.stopPropagation(), i.tooltip && $(t).removeAttr("title"), 0 == $(t).width() ? (i.width = e, i.height = d) : ("none" != i.width && (i.width = i.autowidth ? $(t).width() : i.width), "none" != i.height && (i.height = i.autoheight ? $(t).height() : i.height)), $(this).html().toLowerCase().replace(/(;|")/g, "") == i.placeholder.toLowerCase().replace(/(;|")/g, "") && $(this).html(""), t.editing = !0, t.revert = $(t).html(), $(t).html("")
                    var m = $("<form />")
                    i.cssclass && ("inherit" == i.cssclass ? m.attr("class", $(t).attr("class")) : m.attr("class", i.cssclass)), i.style && ("inherit" == i.style ? (m.attr("style", $(t).attr("style")), m.css("display", $(t).css("display"))) : m.attr("style", i.style))
                    var b, v = a.apply(m, [i, t])
                    if (i.loadurl) {
                        var y = setTimeout(function () { v.disabled = !0, f.apply(m, [i.loadtext, i, t]) }, 100), x = {}
                        x[i.id] = t.id, $.isFunction(i.loaddata) ? $.extend(x, i.loaddata.apply(t, [t.revert, i])) : $.extend(x, i.loaddata), $.ajax({ type: i.loadtype, url: i.loadurl, data: x, async: !1, success: function (t) { window.clearTimeout(y), b = t, v.disabled = !1 } })
                    } else i.data ? (b = i.data, $.isFunction(i.data) && (b = i.data.apply(t, [t.revert, i]))) : b = t.revert
                    f.apply(m, [b, i, t]), v.attr("name", i.name), s.apply(m, [i, t]), $(t).append(m), o.apply(m, [i, t]), $(":input:visible:enabled:first", m).focus(), i.select && v.select(), v.keydown(function (e) { 27 == e.keyCode && (e.preventDefault(), l.apply(m, [i, t])) })
                    var y
                    v.blur("cancel" == i.onblur ? function () { y = setTimeout(function () { l.apply(m, [i, t]) }, 500) } : "submit" == i.onblur ? function () { y = setTimeout(function () { m.submit() }, 200) } : $.isFunction(i.onblur) ? function () { i.onblur.apply(t, [v.val(), i]) } : function () { }), m.submit(function (e) {
                        if (y && clearTimeout(y), e.preventDefault(), !1 !== p.apply(m, [i, t]) && !1 !== n.apply(m, [i, t])) if ($.isFunction(i.target)) {
                            var o = i.target.apply(t, [v.val(), i])
                            $(t).html(o), t.editing = !1, r.apply(t, [t.innerHTML, i]), $.trim($(t).html()) || $(t).html(i.placeholder)
                        } else {
                            var s = {}
                            s[i.name] = v.val(), s[i.id] = t.id, $.isFunction(i.submitdata) ? $.extend(s, i.submitdata.apply(t, [t.revert, i])) : $.extend(s, i.submitdata), "PUT" == i.method && (s._method = "put"), $(t).html(i.indicator)
                            var f = { type: "POST", data: s, dataType: "html", url: i.target, success: function (e) { "html" == f.dataType && $(t).html(e), t.editing = !1, r.apply(t, [e, i]), $.trim($(t).html()) || $(t).html(i.placeholder) }, error: function (e) { c.apply(m, [i, t, e]) } }
                            $.extend(f, i.ajaxoptions), $.ajax(f)
                        } return $(t).attr("title", i.tooltip), !1
                    })
                }
            }), this.reset = function (e) { this.editing && !1 !== u.apply(e, [i, t]) && ($(t).html(t.revert), t.editing = !1, $.trim($(t).html()) || $(t).html(i.placeholder), i.tooltip && $(t).attr("title", i.tooltip)) }
        })
    }, $.editable = {
        types: {
            defaults: {
                element: function () {
                    var t = $('<input type="hidden"></input>')
                    return $(this).append(t), t
                }, content: function (t) { $(":input:first", this).val(t) }, reset: function (t, e) { e.reset(this) }, buttons: function (t, e) {
                    var i = this
                    if (t.submit) {
                        if (t.submit.match(/>$/)) var o = $(t.submit).click(function () { "submit" != o.attr("type") && i.submit() })
                        else {
                            var o = $('<button type="submit" />')
                            o.html(t.submit)
                        } $(this).append(o)
                    } if (t.cancel) {
                        if (t.cancel.match(/>$/)) var n = $(t.cancel)
                        else {
                            var n = $('<button type="cancel" />')
                            n.html(t.cancel)
                        } $(this).append(n), $(n).click(function () {
                            if ($.isFunction($.editable.types[t.type].reset)) var o = $.editable.types[t.type].reset
                            else var o = $.editable.types.defaults.reset
                            return o.apply(i, [t, e]), !1
                        })
                    }
                }
            }, text: {
                element: function (t) {
                    var e = $("<input />")
                    return "none" != t.width && e.width(t.width), "none" != t.height && e.height(t.height), e.attr("autocomplete", "off"), $(this).append(e), e
                }
            }, textarea: {
                element: function (t) {
                    var e = $("<textarea />")
                    return t.rows ? e.attr("rows", t.rows) : "none" != t.height && e.height(t.height), t.cols ? e.attr("cols", t.cols) : "none" != t.width && e.width(t.width), $(this).append(e), e
                }
            }, select: {
                element: function () {
                    var t = $("<select />")
                    return $(this).append(t), t
                }, content: function (data, settings, original) {
                    if (String == data.constructor) eval("var json = " + data)
                    else var json = data
                    for (var key in json) if (json.hasOwnProperty(key) && "selected" != key) {
                        var option = $("<option />").val(key).append(json[key])
                        $("select", this).append(option)
                    } $("select", this).children().each(function () { ($(this).val() == json.selected || $(this).text() == $.trim(original.revert)) && $(this).attr("selected", "selected") })
                }
            }
        }, addInputType: function (t, e) { $.editable.types[t] = e }
    }, $.fn.editable.defaults = { name: "value", id: "id", type: "text", width: "auto", height: "auto", event: "click.editable", onblur: "cancel", loadtype: "GET", loadtext: "Loading...", placeholder: "Click to edit", loaddata: {}, submitdata: {}, ajaxoptions: {} }
}(jQuery)